9)      #include<stdio.h>
#include<stdlib.h>
#include<math.h>

struct node {
    int coef, xexp, yexp, zexp;
    struct node *link;
};
typedef struct node *NODE;

NODE initNode() {
    NODE node = (NODE) malloc(sizeof(struct node));
    if(node == NULL) {
        printf("Memory allocation failed \n");
        exit(0);
    }
    node->link = node; 
    return node;
}

NODE insertTerm(NODE head, int coef, int xexp, int yexp, int zexp) {
    NODE newNode = initNode();
    newNode->coef = coef;
    newNode->xexp = xexp;
    newNode->yexp = yexp;
    newNode->zexp = zexp;
    newNode->link = head->link; 
    head->link = newNode;
    return head;
}

NODE createPolynomial(NODE head) {
    int n, coef, xexp, yexp, zexp;
    printf("Enter the number of terms: ");
    scanf("%d", &n);
    for(int i = 0; i < n; i++) {
        printf("Enter coef, xexp, yexp, zexp for term %d: ", i+1);
        scanf("%d%d%d%d", &coef, &xexp, &yexp, &zexp);
        head = insertTerm(head, coef, xexp, yexp, zexp);
    }
    return head;
}

void displayPolynomial(NODE head) {
    NODE temp = head->link;
    if(temp == head) {
        printf("Polynomial is empty.\n");
        return;
    }
    while(temp != head) {
        printf("%dx^%dy^%dz^%d ", temp->coef, temp->xexp, temp->yexp, temp->zexp);
        temp = temp->link;
        if(temp != head) printf("+ ");
    }
    printf("\n");
}

int evaluatePolynomial(NODE head, int x, int y, int z) {
    int sum = 0;
    NODE temp = head->link;
    while(temp != head) {
        sum += temp->coef * pow(x, temp->xexp) * pow(y, temp->yexp) * pow(z, temp->zexp);
        temp = temp->link;
    }
    return sum;
}

int main() {
    NODE head = initNode(); 
    int choice, x, y, z, result;

    while(1) {
        printf("1. Enter polynomial 2. Display polynomial 3. Evaluate polynomial 4. Exit\nChoose an option: ");
        scanf("%d", &choice);
        switch(choice) {
            case 1:
                head = createPolynomial(head);
                break;
            case 2:
                displayPolynomial(head);
                break;
            case 3:
                printf("Enter values for x, y, z: ");
                scanf("%d%d%d", &x, &y, &z);
                result = evaluatePolynomial(head, x, y, z);
                printf("Result: %d\n", result);
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid option.\n");
        }
    }
    return 0;
}
