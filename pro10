#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct node {
    char info[20];
    struct node *left, *right;
};
typedef struct node *NODEPTR;

NODEPTR newNode(char word[]) {
    NODEPTR t = (NODEPTR)malloc(sizeof(struct node));
    if(t == NULL) {
        printf("\nNode allocation failed");
        exit(0);
    }
    strcpy(t->info, word);
    t->left = t->right = NULL;
    return t;
}

NODEPTR insert(NODEPTR root, char word[]) {
    if (root == NULL) return newNode(word);

    if (strcmp(word, root->info) < 0)
        root->left = insert(root->left, word);
    else if (strcmp(word, root->info) > 0)
        root->right = insert(root->right, word);
    
    return root;
}

void inOrderTraversal(NODEPTR root) {
    if(root != NULL) {
        inOrderTraversal(root->left);
        printf("%s\t", root->info);
        inOrderTraversal(root->right);
    }
}

void preOrderTraversal(NODEPTR root) {
    if(root != NULL) {
        printf("%s\t", root->info);
        preOrderTraversal(root->left);
        preOrderTraversal(root->right);
    }
}

void postOrderTraversal(NODEPTR root) {
    if(root != NULL) {
        postOrderTraversal(root->left);
        postOrderTraversal(root->right);
        printf("%s\t", root->info);
    }
}

void search(NODEPTR root, char key[]) {
    while(root != NULL && strcmp(key, root->info) != 0) {
        root = (strcmp(key, root->info) < 0) ? root->left : root->right;
    }
    if(root == NULL)
        printf("\nKey %s is not found in the dictionary", key);
    else
        printf("\nKey %s is found in the dictionary", key);
}


int main() {
    NODEPTR root = NULL;
    char word[20], key[20];
    int opt;

    do {
        printf("\n1->CREATE DICTIONARY  2->TRAVERSE  3->SEARCH  4->EXIT ");
        printf("\nEnter your option:");
        scanf("%d", &opt);

        switch(opt) {
            case 1:
                do {
                    printf("\nEnter a word (Type END to stop):");
                    scanf("%s", word);
                    if(strcmp(word, "END") == 0) break;
                    root = insert(root, word);
                } while(1);
                printf("\nDICTIONARY CREATED SUCCESSFULLY");
                break;
            case 2:
                printf("\nPREORDER TRAVERSAL OF THE DICTIONARY IS:");
                preOrderTraversal(root);
                printf("\nINORDER TRAVERSAL OF THE DICTIONARY IS:");
                inOrderTraversal(root);
                printf("\nPOSTORDER TRAVERSAL OF THE DICTIONARY IS:");
                postOrderTraversal(root);
                break;
            case 3:
                printf("\nEnter the key to search in the dictionary:");
                scanf("%s", key);
                search(root, key);
                break;
            case 4:
                printf("\nEXITING BINARY TREE");
                exit(0);
        }
    } while(opt != 4);
    return 0;
}
